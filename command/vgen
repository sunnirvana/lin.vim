#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import getopt
import os
import time

sys.path.append(".")
import util

help_msg = """Generate configurations.

usage:
    vgen -c/--clangd            generate compile database for clangd.
                                compile_commands.json is preferred if CMakeLists.txt available on non Windows, otherwise compile_flags.txt.
    vgen -s/--sshkey <email>    generate sshkey for <email>.
    vgen -mc/--mirror-china     generate mirror in china for pip, npm and homebrew.

flag:
    vgen -h/--help      show help message.
"""


def _help():
    print(help_msg)
    exit(0)


def is_ascii_char(s):
    return all(ord(c) < 128 for c in s)


def path_contain(path, part):
    for p in part:
        if p in path:
            return True
    return False


def os_listdir_wrapper(d):
    try:
        return os.listdir(d)
    except:
        return []


def list_directory(base_dir, depth):
    num_sep = base_dir.count(os.path.sep)
    dir_list = []
    for root, dirs, files in os.walk(base_dir):
        for d in dirs:
            fd = os.path.join(root, d)
            if d.startswith(".") or path_contain(fd, [".git", ".svn", ".hg"]):
                continue
            dir_list.append(fd)
        cur_num_sep = root.count(os.path.sep)
        if cur_num_sep >= num_sep + depth:
            del dirs[:]
    return [d.replace("\\", "/") for d in dir_list]


def git_header():
    try:
        root, _ = util.run("git", "rev-parse", "--show-toplevel")
        groot = root[0].strip() if (len(root) > 0) else None
        git_list = list_directory(groot, 2)
        # dump_flags(git_list)
        return git_list
    except:
        return []


def windows_header():
    header = []
    # '-I',
    # 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\include',
    for release in os_listdir_wrapper(
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\"
    ):
        for version in os_listdir_wrapper(
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\"
            % (release)
        ):
            header.append(
                "-IC:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\%s\\include"
                % (release, version)
            )
            # '-I',
    # 'C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17134.0\\ucrt',
    for version in os_listdir_wrapper(
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\"
    ):
        header.append(
            "-IC:\\Program Files (x86)\\Windows Kits\\10\\Include\\%s\\ucrt" % (version)
        )
    # TODO: add C:\\Program Files\\LLVM headers
    return header


def user_header():
    header = []
    header.append("-I.")
    for path in os_listdir_wrapper("."):
        if " " in path:
            continue
        if not is_ascii_char(path):
            continue
        if path.startswith("."):
            continue
        if not os.path.isdir(path):
            continue
        if not path.endswith("include"):
            continue
        header.append("-I%s" % path)
    return header


def _compile_commands():
    print("[vcmd] generate compile_commands.json for clangd")
    gen_folder = ".vgen.%s" % (str(time.time()))
    os.system("cmake -B %s -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ." % (gen_folder))
    if not os.path.exists("%s/compile_commands.json" % (gen_folder)):
        raise Exception("%s/compile_commands.json not exist" % (gen_folder))
    os.system("cp %s/compile_commands.json ." % (gen_folder))
    os.system("rm -rf %s" % (gen_folder))
    print("[vcmd] generate compile_commands.json for clangd - done")


def _compile_flags():
    print("[vcmd] generate compile_flags.txt for clangd")
    print(
        "[vcmd] Windows not support CMAKE_EXPORT_COMPILE_COMMANDS or CMakeLists.txt not exist"
    )
    fp = open("compile_flags.txt", "w")
    uh = user_header()
    wh = windows_header()
    gh = git_header()
    for x in uh:
        fp.write(x + "\n")
    for x in wh:
        fp.write(x + "\n")
    for x in gh:
        fp.write(x + "\n")
    fp.close()
    print("[vcmd] generate compile_flags.txt for clangd - done")


def _clangd():
    cmake_lists_txt = "CMakeLists.txt"
    if util.is_windows():
        _compile_flags()
    else:
        _compile_commands()
    exit(0)


def _sshkey(email):
    os.system("ssh-keygen -t rsa -b 4096 -C '%s'" % email)
    os.system("touch ~/.ssh/authorized_keys")
    os.system("chmod 700 -R ~/.ssh")
    os.system("chmod 600 ~/.ssh/authorized_keys")
    os.system("chmod 600 ~/.ssh/id_rsa")
    os.system("chmod 600 ~/.ssh/id_rsa.pub")
    exit(0)


def _mirror_china():
    if util.is_macos():
        os.system(
            'git -C "$(brew --repo)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git'
        )
        os.system(
            'git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git'
        )
        os.system(
            'git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git'
        )
        print("[vcmd] use tsinghua-mirror for homebrew")
    os.system(
        "pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple"
    )
    print("[vcmd] use tsinghua-mirror for pip3")
    os.system("npm config set registry https://registry.npm.taobao.org")
    print("[vcmd] use taobao-mirror for npm")
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:], "csm:h", ["clangd", "sshkey", "mirror-china", "help"]
        )
        for opt in opts:
            if opt[0] in ("-c", "--clangd"):
                _clangd()
            elif opt[0] in ("-s", "--sshkey"):
                _sshkey(args[0])
            elif opt[0] == "-m":
                if opt[1] == "c":
                    _mirror_china()
            elif opt[0] == "--mirror-china":
                _mirror_china()
        _help()
    except getopt.GetoptError as e:
        print(str(e) + "\n")
        _help()
    except Exception as e:
        print(str(e) + "\n")
